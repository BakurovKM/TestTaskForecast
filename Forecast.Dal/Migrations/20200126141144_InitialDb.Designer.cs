// <auto-generated />
using System;
using Forecast.Dal.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forecast.Dal.Migrations
{
    [DbContext(typeof(ForecastContext))]
    [Migration("20200126141144_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Forecast.Dal.Context.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Forecast.Dal.Context.Models.CityForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ForecastId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ForecastId");

                    b.ToTable("CityForecasts");
                });

            modelBuilder.Entity("Forecast.Dal.Context.Models.DayForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CityForecastId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Describe")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<decimal>("Precipitation")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("TemperatureMax")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureMin")
                        .HasColumnType("int");

                    b.Property<decimal>("WindSpeedMs")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CityForecastId");

                    b.ToTable("DayForecasts");
                });

            modelBuilder.Entity("Forecast.Dal.Context.Models.Forecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("Forecast.Dal.Context.Models.CityForecast", b =>
                {
                    b.HasOne("Forecast.Dal.Context.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Forecast.Dal.Context.Models.Forecast", "Forecast")
                        .WithMany("CityForecasts")
                        .HasForeignKey("ForecastId");
                });

            modelBuilder.Entity("Forecast.Dal.Context.Models.DayForecast", b =>
                {
                    b.HasOne("Forecast.Dal.Context.Models.CityForecast", "CityForecast")
                        .WithMany("DayForecasts")
                        .HasForeignKey("CityForecastId");
                });
#pragma warning restore 612, 618
        }
    }
}
